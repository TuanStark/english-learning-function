version: "3.8"

services:
  functions:
    container_name: "${PROJECT_NAME}_functions"
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DATABASE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE_IN=${JWT_EXPIRE_IN}
      - IS_PUBLIC_KEY=${IS_PUBLIC_KEY}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - MAIL_HOST=${MAIL_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      - db
    networks:
      my_custom_network:
        ipv4_address: ${FUNCTION_IP}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:latest
    container_name: "${PROJECT_NAME}_postgres"
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    networks:
      my_custom_network:
        ipv4_address: ${DATABASE_IP}

  adminer:
    image: adminer
    container_name: "${PROJECT_NAME}_adminer"
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      my_custom_network:
        ipv4_address: ${ADMINER_IP}

volumes:
  postgres-data:

networks:
  my_custom_network:
    external: true
